{"version":3,"sources":["Scanner.jsx","Result.jsx","App.js","serviceWorker.js","index.js"],"names":["Scanner","_onDetected","result","props","onDetected","Quagga","init","inputStream","type","constraints","width","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","err","console","log","start","this","offDetected","id","className","Component","Result","codeResult","code","format","App","state","scanning","results","_scan","setState","concat","map","i","key","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAgDeA,E,2MATbC,YAAc,SAAAC,GACZ,EAAKC,MAAMC,WAAWF,I,mFAnCtBG,IAAOC,KACL,CACEC,YAAa,CACXC,KAAM,aACNC,YAAa,CACXC,MAAO,IACPC,OAAQ,IACRC,WAAY,gBAGhBC,QAAS,CACPC,UAAW,SACXC,YAAY,GAEdC,aAAc,EACdC,QAAS,CACPC,QAAS,CAAC,oBAEZC,QAAQ,IAEV,SAASC,GACP,GAAIA,EACF,OAAOC,QAAQC,IAAIF,GAErBf,IAAOkB,WAGXlB,IAAOD,WAAWoB,KAAKvB,e,6CAIvBI,IAAOoB,YAAYD,KAAKvB,e,+BAQxB,OAAO,yBAAKyB,GAAG,cAAcC,UAAU,iB,GAzCrBC,aCgBPC,E,iLAfX,IAAM3B,EAASsB,KAAKrB,MAAMD,OAE1B,OAAKA,EAKH,4BACG,IACAA,EAAO4B,WAAWC,KAFrB,KAE6B7B,EAAO4B,WAAWE,OAF/C,IAEwD,KANjD,S,GALQJ,aCGfK,E,2MACJC,MAAQ,CACNC,UAAU,EACVC,QAAS,I,EAGXC,MAAQ,WACN,EAAKC,SAAS,CAAEH,UAAW,EAAKD,MAAMC,Y,EAGxClC,YAAc,SAAAC,GACZ,EAAKoC,SAAS,CAAEF,QAAS,EAAKF,MAAME,QAAQG,OAAO,CAACrC,MACpD,EAAKoC,SAAS,CAAEH,UAAU,K,wEAI1B,OACE,6BACE,wBAAIR,UAAU,WACXH,KAAKU,MAAME,QAAQI,KAAI,SAACtC,EAAQuC,GAAT,OACtB,kBAAC,EAAD,CAAQC,IAAKxC,EAAO4B,WAAWC,KAAOU,EAAGvC,OAAQA,QAGpDsB,KAAKU,MAAMC,SAAW,kBAAC,EAAD,CAAS/B,WAAYoB,KAAKvB,cAAkB,U,GAvBzD2B,aA6BHK,IAETU,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GCzBLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OAAO,kBAAC,EAAD,MAASH,SAASC,eAAe,SD2H3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.75b4e31a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Quagga from 'quagga'\n\nclass Scanner extends Component {\n  componentDidMount() {\n    Quagga.init(\n      {\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: 640,\n            height: 480,\n            facingMode: 'environment', // or user\n          },\n        },\n        locator: {\n          patchSize: 'medium',\n          halfSample: true,\n        },\n        numOfWorkers: 4,\n        decoder: {\n          readers: ['code_128_reader'],\n        },\n        locate: true,\n      },\n      function(err) {\n        if (err) {\n          return console.log(err)\n        }\n        Quagga.start()\n      },\n    )\n    Quagga.onDetected(this._onDetected)\n  }\n\n  componentWillUnmount() {\n    Quagga.offDetected(this._onDetected)\n  }\n\n  _onDetected = result => {\n    this.props.onDetected(result)\n  }\n\n  render() {\n    return <div id=\"interactive\" className=\"viewport\" />\n  }\n}\n\nexport default Scanner\n","import React, { Component } from 'react'\n\nclass Result extends Component {\n  render() {\n    const result = this.props.result\n\n    if (!result) {\n      return null\n    }\n\n    return (\n      <li>\n        {' '}\n        {result.codeResult.code} [{result.codeResult.format}]{' '}\n      </li>\n    )\n  }\n}\n\nexport default Result\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport Scanner from './Scanner'\nimport Result from './Result'\n\nclass App extends Component {\n  state = {\n    scanning: true,\n    results: [],\n  }\n\n  _scan = () => {\n    this.setState({ scanning: !this.state.scanning })\n  }\n\n  _onDetected = result => {\n    this.setState({ results: this.state.results.concat([result]) })\n    this.setState({ scanning: false})\n  }\n\n  render() {\n    return (\n      <div>\n        <ul className=\"results\">\n          {this.state.results.map((result, i) => (\n            <Result key={result.codeResult.code + i} result={result} />\n          ))}\n        </ul>\n        {this.state.scanning ? <Scanner onDetected={this._onDetected} /> : null}\n      </div>\n    )\n  }\n}\n\nexport default App\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}